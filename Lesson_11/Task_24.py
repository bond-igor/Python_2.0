'''Разработайте программное обеспечение для ведения журнала событий. Вам необходимо создать класс, который будет
представлять строки журнала и включать в себя информацию об авторе и времени создания каждой записи.
Условие задачи:
Создайте класс MyStr, который наследуется от встроенного класса str и добавлять дополнительную информацию о создателе
строки и времени ее создания. Этот класс будет представлять строки с информацией о событиях.
Класс MyStr должен иметь следующие атрибуты и методы:
value (str): Строковое значение с описанием события.
author (str): Имя автора, создавшего запись.
time: Время создания записи в формате '%Y-%m-%d %H:%M'.
Магические методы (Dunder-методы):
Реализуйте метод __new__(cls, value, author), который создает новый объект класса MyStr с заданным value и author.
Метод также автоматически фиксирует время создания записи. В этом методе создается новый объект MyStr с указанными атрибутами и текущим временем в атрибуте time.
Реализуйте метод __str__(self), который возвращает строковое представление объекта класса MyStr с информацией о событии, авторе и времени создания.
Реализуйте метод __repr__(self), который возвращает строковое представление объекта класса MyStr.
Метод __repr__ возвращает строку, которая может быть использована для создания точно такого же объектаMyStrс теми же значениямиvalueиauthor`'''

import time
from datetime import datetime


class MyStr(str):
	"""Создайте класс МояСтрока где будут доступны все возможности str и
	дополнительно хранится имя автора строки и время создания (time.time)"""

	def __new__(cls, value, name):
		instance = super().__new__(cls, value)
		instance.name = name
		instance.time = time.time()
		return instance

	def __str__(self) -> str:
		formatted_time = datetime.fromtimestamp(self.time).strftime('%Y-%m-%d %H:%M')
		return f'{super().__str__()} (Автор: {self.name}, Время создания: {formatted_time})'

	def __repr__(self) -> str:
		return f"MyStr('{super().__str__()}', '{self.name}')"

my_string = MyStr("Другой текст", "Бунин")
print(my_string)